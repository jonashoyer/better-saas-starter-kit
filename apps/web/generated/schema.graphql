### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CheckoutSession {
  sessionId: String
}

input CreateProjectInput {
  name: String!
}

input CreateUserInviteInput {
  emails: [String!]!
  projectId: String!
  role: ProjectRole!
}

scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

enum InvoiceBillingReason {
  AUTOMATIC_PENDING_INVOICE_ITEM_INVOICE
  MANUAL
  QUOTE_ACCEPT
  SUBSCRIPTION
  SUBSCRIPTION_CREATE
  SUBSCRIPTION_CYCLE
  SUBSCRIPTION_THRESHOLD
  SUBSCRIPTION_UPDATE
  UPCOMING
}

enum InvoiceStatus {
  DELETED
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

scalar Json

type Mutation {
  createCheckoutSession(metadata: Json = "{}", price: String!, projectId: String!, quantity: Int = 1): CheckoutSession
  createManyUserInvite(input: CreateUserInviteInput!): [UserInvite]
  createProject(input: CreateProjectInput!): Project
  createStripeSetupIntent(projectId: String!): StripeSetupIntent
  deleteProject(id: String!): Project
  deleteStripePaymentMethod(id: String!): StripePaymentMethod
  deleteTaxId(projectId: String!): Ok
  deleteUserInvite(id: String!): UserInvite
  deleteUserProject(id: String!): UserProject
  sendVerificationEmail: StatusResponse
  syncProjectStripe(projectId: String!): Ok
  updateProject(input: UpdateProjectInput!): Project
  updateStripePaymentMethod(input: UpdateStripePaymentMethodInput!): StripePaymentMethod
  updateTaxId(input: UpdateTaxIdInput!): Ok
  updateUser(input: UpdateUserInput!): User
  updateUserProject(input: UpdateUserProjectInput!): UserProject
  upsertStripeSubscription(input: UpsertStripeSubscriptionInput!): StripeSubscription
  verifyEmail(token: String!): User
}

type Ok {
  message: String
  ok: Boolean!
}

type Project {
  id: String!
  name: String!
  stripeInvoices(cursor: StripeInvoiceWhereUniqueInput, skip: Int, take: Int): [StripeInvoice!]!
  stripePaymentMethods(cursor: StripePaymentMethodWhereUniqueInput, skip: Int, take: Int): [StripePaymentMethod!]!
  stripeSubscriptions(cursor: StripeSubscriptionWhereUniqueInput, skip: Int, take: Int): [StripeSubscription!]!
  userInvites(cursor: UserInviteWhereUniqueInput, skip: Int, take: Int): [UserInvite!]!
  users(cursor: UserProjectWhereUniqueInput, skip: Int, take: Int): [UserProject!]!
}

enum ProjectRole {
  ADMIN
  USER
}

type Query {
  getUserInvites(projectId: String!): [UserInvite]
  ping: String!
  project(projectId: String): Project
  self: User
  stripeProducts: [StripeProduct]
}

type StatusResponse {
  message: String
  ok: Boolean
}

type StripeInvoice {
  amountDue: Int!
  amountPaid: Int!
  amountRemaining: Int!
  billingReason: InvoiceBillingReason
  created: DateTime!
  dueDate: DateTime
  id: String!
  invoicePdf: String
  periodEnd: DateTime!
  periodStart: DateTime!
  receiptNumber: String
  status: InvoiceStatus
  subtotal: Int!
  tax: Int
  total: Int!
}

input StripeInvoiceWhereUniqueInput {
  id: String
}

type StripePaymentMethod {
  brand: String!
  createdAt: DateTime!
  expMonth: Int!
  expYear: Int!
  id: String!
  isDefault: Boolean!
  last4: String!
  project: Project!
  type: String!
  updatedAt: DateTime!
}

input StripePaymentMethodWhereUniqueInput {
  id: String
}

type StripePrice {
  active: Boolean!
  currency: String!
  id: String!
  interval: String
  intervalCount: Int
  metadata: Json!
  stripeProduct: StripeProduct
  trialPeriodDays: Int
  unitAmount: Int
}

input StripePriceWhereUniqueInput {
  id: String
}

type StripeProduct {
  active: Boolean!
  id: String!
  image: String
  metadata: Json!
  name: String!
  stripePrices(cursor: StripePriceWhereUniqueInput, skip: Int, take: Int): [StripePrice!]!
}

type StripeSetupIntent {
  clientSecret: String!
}

type StripeSubscription {
  cancelAt: DateTime
  cancelAtPeriodEnd: Boolean!
  canceledAt: DateTime
  created: DateTime!
  currentPeriodEnd: DateTime!
  currentPeriodStart: DateTime!
  endedAt: DateTime
  id: String!
  metadata: Json!
  quantity: Int!
  status: StripeSubscriptionStatus!
  stripePrice: StripePrice!
  stripePriceId: String!
}

enum StripeSubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  PAST_DUE
  TRIALING
  UNPAID
}

input StripeSubscriptionWhereUniqueInput {
  id: String
}

enum TaxType {
  AE_TRN
  AU_ABN
  AU_ARN
  BR_CNPJ
  BR_CPF
  CA_BN
  CA_GST_HST
  CA_PST_BC
  CA_PST_MB
  CA_PST_SK
  CA_QST
  CH_VAT
  CL_TIN
  ES_CIF
  EU_VAT
  GB_VAT
  HK_BR
  ID_NPWP
  IL_VAT
  IN_GST
  JP_CN
  JP_RN
  KR_BRN
  LI_UID
  MX_RFC
  MY_FRP
  MY_ITN
  MY_SST
  NO_VAT
  NZ_GST
  RU_INN
  RU_KPP
  SA_VAT
  SG_GST
  SG_UEN
  TH_VAT
  TW_VAT
  US_EIN
  ZA_VAT
}

input UpdateProjectInput {
  id: String!
  name: String
}

input UpdateStripePaymentMethodInput {
  id: String!
  isDefault: Boolean
}

input UpdateTaxIdInput {
  projectId: String!
  taxId: String!
  taxType: TaxType!
}

input UpdateUserInput {
  email: String
  id: String!
  name: String
}

input UpdateUserProjectInput {
  id: String!
  role: ProjectRole
}

input UpsertStripeSubscriptionInput {
  priceId: String!
  projectId: String!
}

type User {
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  id: String!
  image: String
  name: String
  projects(cursor: UserProjectWhereUniqueInput, skip: Int, take: Int): [UserProject!]!
}

type UserInvite {
  createdAt: DateTime!
  email: String!
  id: String!
  role: ProjectRole!
}

input UserInviteProjectIdEmailCompoundUniqueInput {
  email: String!
  projectId: String!
}

input UserInviteWhereUniqueInput {
  id: String
  projectId_email: UserInviteProjectIdEmailCompoundUniqueInput
  token: String
}

type UserProject {
  createdAt: DateTime!
  id: String!
  project: Project!
  role: ProjectRole!
  user: User!
}

input UserProjectProjectIdUserIdCompoundUniqueInput {
  projectId: String!
  userId: String!
}

input UserProjectWhereUniqueInput {
  id: String
  projectId_userId: UserProjectProjectIdUserIdCompoundUniqueInput
}

type VerificationToken {
  id: String!
}
