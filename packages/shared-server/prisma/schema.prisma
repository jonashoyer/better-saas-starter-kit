datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationEmail VerificationEmail? @relation

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  projects UserProject[]
}

enum ProjectRole {
  ADMIN
  USER
}

model UserProject {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  userId    String
  projectId String
  role      ProjectRole @default(USER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

enum SubscriptionPlan {
  FREE
  BASIC
  PREMIUM
}

model Project {
  id               String           @id @default(cuid())
  name             String
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  stripeCustomerId String           @unique
  stripeTaxId      String?
  subscriptionPlan SubscriptionPlan @default(FREE)

  users                UserProject[]
  userInvites          UserInvite[]
  stripeSubscriptions  StripeSubscription[]
  stripePaymentMethods StripePaymentMethod[]
  stripeInvoices       StripeInvoice[]
}

enum StripeSubscriptionStatus {
  INCOMPLETE
  INCOMPLETE_EXPIRED
  TRIALING
  ACTIVE
  PAST_DUE
  CANCELED
  UNPAID
}

model StripeSubscription {
  id               String                   @id
  subscriptionPlan SubscriptionPlan         @default(FREE)
  metadata         Json
  status           StripeSubscriptionStatus
  stripePriceId    String

  quantity          Int
  cancelAtPeriodEnd Boolean

  cancelAt           DateTime?
  canceledAt         DateTime?
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  created            DateTime
  endedAt            DateTime?

  projectId   String
  project     Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  stripePrice StripePrice @relation(fields: [stripePriceId], references: [id], onDelete: Cascade)
}

model UserInvite {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  email     String
  token     String      @unique
  role      ProjectRole
  projectId String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
}

model StripePaymentMethod {
  id        String   @id
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brand    String
  last4    String
  expMonth Int
  expYear  Int
  type     String

  importance PaymentMethodImportance

  projectId String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum PaymentMethodImportance {
  PRIMARY
  BACKUP
  OTHER
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model VerificationEmail {
  id        String   @id @default(cuid())
  accountId String
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, token])
}

model StripeProduct {
  id       String  @id
  type     String  @unique
  active   Boolean
  name     String
  image    String?
  metadata Json

  prices StripePrice[]
}

model StripePrice {
  id              String  @id
  productId       String?
  active          Boolean
  currency        String
  type            String
  unitAmount      Int?
  interval        String?
  intervalCount   Int?
  trialPeriodDays Int?
  metadata        Json

  product             StripeProduct?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  stripeSubscriptions StripeSubscription[]
}

enum InvoiceStatus {
  DELETED
  DRAFT
  OPEN
  PAID
  UNCOLLECTIBLE
  VOID
}

enum InvoiceBillingReason {
  AUTOMATIC_PENDING_INVOICE_ITEM_INVOICE
  MANUAL
  QUOTE_ACCEPT
  SUBSCRIPTION
  SUBSCRIPTION_CREATE
  SUBSCRIPTION_CYCLE
  SUBSCRIPTION_THRESHOLD
  SUBSCRIPTION_UPDATE
  UPCOMING
}

model StripeInvoice {
  id              String                @id
  created         DateTime
  dueDate         DateTime?
  status          InvoiceStatus
  amountDue       Int
  amountPaid      Int
  amountRemaining Int
  billingReason   InvoiceBillingReason?
  invoicePdf      String?
  periodStart     DateTime
  periodEnd       DateTime
  receiptNumber   String?
  subtotal        Int
  tax             Int?
  total           Int

  projectId String
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}
