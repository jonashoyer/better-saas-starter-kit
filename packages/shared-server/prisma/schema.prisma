datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator prisma_client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  verificationEmail VerificationEmail? @relation

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  projects UserProject[]
}

enum ProjectRole {
  ADMIN
  USER
}

model UserProject {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  userId    String
  projectId String
  role      ProjectRole @default(USER)

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Project {
  id               String   @id @default(cuid())
  name             String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  stripeCustomerId String   @unique

  users          UserProject[]
  paymentMethods PaymentMethod[]
  userInvites    UserInvite[]
}

model UserInvite {
  id        String      @id @default(cuid())
  createdAt DateTime    @default(now())
  email     String
  token     String      @unique
  role      ProjectRole
  projectId String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
}

model PaymentMethod {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brand    String
  last4    String
  expMonth Int
  expYear  Int
  type     String

  importance PaymentMethodImportance

  projectId String

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

enum PaymentMethodImportance {
  PRIMARY
  BACKUP
  OTHER
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model VerificationEmail {
  id        String   @id @default(cuid())
  accountId String
  email     String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())

  account Account @relation(fields: [accountId], references: [id], onDelete: Cascade)

  @@unique([accountId, token])
}

model Product {
  id       String  @id
  type     String  @unique
  active   Boolean
  name     String
  image    String?
  metadata Json

  prices ProductPrice[]
}

model ProductPrice {
  id              String  @id
  productId       String?
  active          Boolean
  currency        String
  type            String
  unitAmount      Int?
  interval        String?
  intervalCount   Int?
  trialPeriodDays Int?
  metadata        Json

  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
}
