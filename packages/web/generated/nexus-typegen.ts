/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import type * as prisma from "./../../../node_modules/.prisma/client/index"
import type { Context } from "./../graphql/context"
import type { FieldAuthorizeResolver } from "nexus/dist/plugins/fieldAuthorizePlugin"
import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    Json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
    Date<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    Json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
    Date<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  PaymentMethodWhereUniqueInput: { // input type
    id?: string | null; // String
  }
  UserProjectProjectIdUserIdCompoundUniqueInput: { // input type
    projectId: string; // String!
    userId: string; // String!
  }
  UserProjectWhereUniqueInput: { // input type
    id?: string | null; // String
    projectId_userId?: NexusGenInputs['UserProjectProjectIdUserIdCompoundUniqueInput'] | null; // UserProjectProjectIdUserIdCompoundUniqueInput
  }
}

export interface NexusGenEnums {
  PaymentMethodImportance: prisma.PaymentMethodImportance
  ProjectRole: prisma.ProjectRole
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Date: any
  DateTime: any
  JSONObject: any
  Json: any
}

export interface NexusGenObjects {
  CheckoutSession: { // root type
    sessionId?: string | null; // String
  }
  Mutation: {};
  PaymentMethod: prisma.PaymentMethod;
  Project: prisma.Project;
  Query: {};
  User: prisma.User;
  UserProject: prisma.UserProject;
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  CheckoutSession: { // field return type
    sessionId: string | null; // String
  }
  Mutation: { // field return type
    CreateCheckoutSession: NexusGenRootTypes['CheckoutSession'] | null; // CheckoutSession
  }
  PaymentMethod: { // field return type
    brand: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    expMonth: number; // Int!
    expYear: number; // Int!
    id: string; // String!
    importance: NexusGenEnums['PaymentMethodImportance']; // PaymentMethodImportance!
    last4: string; // String!
    project: NexusGenRootTypes['Project']; // Project!
    type: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Project: { // field return type
    id: string; // String!
    name: string; // String!
    paymentMethods: NexusGenRootTypes['PaymentMethod'][]; // [PaymentMethod!]!
    users: NexusGenRootTypes['UserProject'][]; // [UserProject!]!
  }
  Query: { // field return type
    currentProject: NexusGenRootTypes['Project'] | null; // Project
    ping: string; // String!
    self: NexusGenRootTypes['User'] | null; // User
  }
  User: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string | null; // String
    emailVerified: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    image: string | null; // String
    name: string | null; // String
    projects: NexusGenRootTypes['UserProject'][]; // [UserProject!]!
  }
  UserProject: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    project: NexusGenRootTypes['Project']; // Project!
    role: NexusGenEnums['ProjectRole']; // ProjectRole!
    user: NexusGenRootTypes['User']; // User!
  }
}

export interface NexusGenFieldTypeNames {
  CheckoutSession: { // field return type name
    sessionId: 'String'
  }
  Mutation: { // field return type name
    CreateCheckoutSession: 'CheckoutSession'
  }
  PaymentMethod: { // field return type name
    brand: 'String'
    createdAt: 'DateTime'
    expMonth: 'Int'
    expYear: 'Int'
    id: 'String'
    importance: 'PaymentMethodImportance'
    last4: 'String'
    project: 'Project'
    type: 'String'
    updatedAt: 'DateTime'
  }
  Project: { // field return type name
    id: 'String'
    name: 'String'
    paymentMethods: 'PaymentMethod'
    users: 'UserProject'
  }
  Query: { // field return type name
    currentProject: 'Project'
    ping: 'String'
    self: 'User'
  }
  User: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    emailVerified: 'DateTime'
    id: 'String'
    image: 'String'
    name: 'String'
    projects: 'UserProject'
  }
  UserProject: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    project: 'Project'
    role: 'ProjectRole'
    user: 'User'
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    CreateCheckoutSession: { // args
      metadata: NexusGenScalars['Json'] | null; // Json
      price: string; // String!
      projectId: string; // String!
      quantity: number | null; // Int
    }
  }
  Project: {
    paymentMethods: { // args
      after?: NexusGenInputs['PaymentMethodWhereUniqueInput'] | null; // PaymentMethodWhereUniqueInput
      before?: NexusGenInputs['PaymentMethodWhereUniqueInput'] | null; // PaymentMethodWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
    users: { // args
      after?: NexusGenInputs['UserProjectWhereUniqueInput'] | null; // UserProjectWhereUniqueInput
      before?: NexusGenInputs['UserProjectWhereUniqueInput'] | null; // UserProjectWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
  Query: {
    currentProject: { // args
      projectId?: string | null; // String
    }
  }
  User: {
    projects: { // args
      after?: NexusGenInputs['UserProjectWhereUniqueInput'] | null; // UserProjectWhereUniqueInput
      before?: NexusGenInputs['UserProjectWhereUniqueInput'] | null; // UserProjectWhereUniqueInput
      first?: number | null; // Int
      last?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
    /**
     * Authorization for an individual field. Returning "true"
     * or "Promise<true>" means the field can be accessed.
     * Returning "false" or "Promise<false>" will respond
     * with a "Not Authorized" error for the field.
     * Returning or throwing an error will also prevent the
     * resolver from executing.
     */
    authorize?: FieldAuthorizeResolver<TypeName, FieldName>
    /**
     * The nullability guard can be helpful, but is also a potentially expensive operation for lists.
     * We need to iterate the entire list to check for null items to guard against. Set this to true
     * to skip the null guard on a specific field if you know there's no potential for unsafe types.
     */
    skipNullGuard?: boolean
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
    /**
     * Whether the type can be null
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    nullable?: boolean
    /**
     * Whether the type is list of values, or just a single value.
     * If list is true, we assume the type is a list. If list is an array,
     * we'll assume that it's a list with the depth. The boolean indicates whether
     * the type is required (non-null), where true = nonNull, false = nullable.
     * @see declarativeWrappingPlugin
     */
    list?: true | boolean[]
    /**
     * Whether the type should be non null, `required: true` = `nullable: false`
     * @default (depends on whether nullability is configured in type or schema)
     * @see declarativeWrappingPlugin
     */
    required?: boolean
  }
}