### This file was generated by Nexus Schema
### Do not make changes to this file directly


type CheckoutSession {
  sessionId: String
}

scalar Date

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

scalar Json

type Mutation {
  createCheckoutSession(metadata: Json = "{}", price: String!, projectId: String!, quantity: Int = 1): CheckoutSession
  deleteProject(id: String!): Project
  updateProject(update: UpdateProjectInput!): Project
}

type PaymentMethod {
  brand: String!
  createdAt: DateTime!
  expMonth: Int!
  expYear: Int!
  id: String!
  importance: PaymentMethodImportance!
  last4: String!
  project: Project!
  type: String!
  updatedAt: DateTime!
}

enum PaymentMethodImportance {
  BACKUP
  OTHER
  PRIMARY
}

input PaymentMethodWhereUniqueInput {
  id: String
}

type Project {
  id: String!
  name: String!
  paymentMethods(after: PaymentMethodWhereUniqueInput, before: PaymentMethodWhereUniqueInput, first: Int, last: Int): [PaymentMethod!]!
  users(after: UserProjectWhereUniqueInput, before: UserProjectWhereUniqueInput, first: Int, last: Int): [UserProject!]!
}

enum ProjectRole {
  ADMIN
  USER
}

type Query {
  currentProject(projectId: String): Project
  ping: String!
  self: User
  selfProjects: [Project]
}

input UpdateProjectInput {
  id: String!
  name: String
}

type User {
  createdAt: DateTime!
  email: String
  emailVerified: DateTime
  id: String!
  image: String
  name: String
  projects(after: UserProjectWhereUniqueInput, before: UserProjectWhereUniqueInput, first: Int, last: Int): [UserProject!]!
}

type UserProject {
  createdAt: DateTime!
  id: String!
  project: Project!
  role: ProjectRole!
  user: User!
}

input UserProjectProjectIdUserIdCompoundUniqueInput {
  projectId: String!
  userId: String!
}

input UserProjectWhereUniqueInput {
  id: String
  projectId_userId: UserProjectProjectIdUserIdCompoundUniqueInput
}
